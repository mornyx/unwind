#![allow(unused)]

// These DW_* constants were taken from version 3 of the DWARF standard,
// which is Copyright (c) 2005 Free Standards Group, and
// Copyright (c) 1992, 1993 UNIX International, Inc.

// FSF exception handling Pointer-Encoding constants.
// Used in CFI augmentation by GCC.
pub const DW_EH_PE_PTR: u8 = 0x00;
pub const DW_EH_PE_ULEB128: u8 = 0x01;
pub const DW_EH_PE_UDATA2: u8 = 0x02;
pub const DW_EH_PE_UDATA4: u8 = 0x03;
pub const DW_EH_PE_UDATA8: u8 = 0x04;
pub const DW_EH_PE_SIGNED: u8 = 0x08;
pub const DW_EH_PE_SLEB128: u8 = 0x09;
pub const DW_EH_PE_SDATA2: u8 = 0x0A;
pub const DW_EH_PE_SDATA4: u8 = 0x0B;
pub const DW_EH_PE_SDATA8: u8 = 0x0C;
pub const DW_EH_PE_ABSPTR: u8 = 0x00;
pub const DW_EH_PE_PCREL: u8 = 0x10;
pub const DW_EH_PE_TEXTREL: u8 = 0x20;
pub const DW_EH_PE_DATAREL: u8 = 0x30;
pub const DW_EH_PE_FUNCREL: u8 = 0x40;
pub const DW_EH_PE_ALIGNED: u8 = 0x50;
pub const DW_EH_PE_INDIRECT: u8 = 0x80;
pub const DW_EH_PE_OMIT: u8 = 0xFF;

// DWARF expressions.
pub const DW_OP_ADDR: u8 = 0x03; // constant address (size target specific)
pub const DW_OP_DEREF: u8 = 0x06;
pub const DW_OP_CONST1U: u8 = 0x08; // 1-byte constant
pub const DW_OP_CONST1S: u8 = 0x09; // 1-byte constant
pub const DW_OP_CONST2U: u8 = 0x0A; // 2-byte constant
pub const DW_OP_CONST2S: u8 = 0x0B; // 2-byte constant
pub const DW_OP_CONST4U: u8 = 0x0C; // 4-byte constant
pub const DW_OP_CONST4S: u8 = 0x0D; // 4-byte constant
pub const DW_OP_CONST8U: u8 = 0x0E; // 8-byte constant
pub const DW_OP_CONST8S: u8 = 0x0F; // 8-byte constant
pub const DW_OP_CONSTU: u8 = 0x10; // ULEB128 constant
pub const DW_OP_CONSTS: u8 = 0x11; // SLEB128 constant
pub const DW_OP_DUP: u8 = 0x12;
pub const DW_OP_DROP: u8 = 0x13;
pub const DW_OP_OVER: u8 = 0x14;
pub const DW_OP_PICK: u8 = 0x15; // 1-byte stack index
pub const DW_OP_SWAP: u8 = 0x16;
pub const DW_OP_ROT: u8 = 0x17;
pub const DW_OP_XDEREF: u8 = 0x18;
pub const DW_OP_ABS: u8 = 0x19;
pub const DW_OP_AND: u8 = 0x1A;
pub const DW_OP_DIV: u8 = 0x1B;
pub const DW_OP_MINUS: u8 = 0x1C;
pub const DW_OP_MOD: u8 = 0x1D;
pub const DW_OP_MUL: u8 = 0x1E;
pub const DW_OP_NEG: u8 = 0x1F;
pub const DW_OP_NOT: u8 = 0x20;
pub const DW_OP_OR: u8 = 0x21;
pub const DW_OP_PLUS: u8 = 0x22;
pub const DW_OP_PLUS_UCONST: u8 = 0x23; // ULEB128 addend
pub const DW_OP_SHL: u8 = 0x24;
pub const DW_OP_SHR: u8 = 0x25;
pub const DW_OP_SHRA: u8 = 0x26;
pub const DW_OP_XOR: u8 = 0x27;
pub const DW_OP_SKIP: u8 = 0x2F; // signed 2-byte constant
pub const DW_OP_BRA: u8 = 0x28; // signed 2-byte constant
pub const DW_OP_EQ: u8 = 0x29;
pub const DW_OP_GE: u8 = 0x2A;
pub const DW_OP_GT: u8 = 0x2B;
pub const DW_OP_LE: u8 = 0x2C;
pub const DW_OP_LT: u8 = 0x2D;
pub const DW_OP_NE: u8 = 0x2E;
pub const DW_OP_LIT0: u8 = 0x30; // Literal 0
pub const DW_OP_LIT1: u8 = 0x31; // Literal 1
pub const DW_OP_LIT2: u8 = 0x32; // Literal 2
pub const DW_OP_LIT3: u8 = 0x33; // Literal 3
pub const DW_OP_LIT4: u8 = 0x34; // Literal 4
pub const DW_OP_LIT5: u8 = 0x35; // Literal 5
pub const DW_OP_LIT6: u8 = 0x36; // Literal 6
pub const DW_OP_LIT7: u8 = 0x37; // Literal 7
pub const DW_OP_LIT8: u8 = 0x38; // Literal 8
pub const DW_OP_LIT9: u8 = 0x39; // Literal 9
pub const DW_OP_LIT10: u8 = 0x3A; // Literal 10
pub const DW_OP_LIT11: u8 = 0x3B; // Literal 11
pub const DW_OP_LIT12: u8 = 0x3C; // Literal 12
pub const DW_OP_LIT13: u8 = 0x3D; // Literal 13
pub const DW_OP_LIT14: u8 = 0x3E; // Literal 14
pub const DW_OP_LIT15: u8 = 0x3F; // Literal 15
pub const DW_OP_LIT16: u8 = 0x40; // Literal 16
pub const DW_OP_LIT17: u8 = 0x41; // Literal 17
pub const DW_OP_LIT18: u8 = 0x42; // Literal 18
pub const DW_OP_LIT19: u8 = 0x43; // Literal 19
pub const DW_OP_LIT20: u8 = 0x44; // Literal 20
pub const DW_OP_LIT21: u8 = 0x45; // Literal 21
pub const DW_OP_LIT22: u8 = 0x46; // Literal 22
pub const DW_OP_LIT23: u8 = 0x47; // Literal 23
pub const DW_OP_LIT24: u8 = 0x48; // Literal 24
pub const DW_OP_LIT25: u8 = 0x49; // Literal 25
pub const DW_OP_LIT26: u8 = 0x4A; // Literal 26
pub const DW_OP_LIT27: u8 = 0x4B; // Literal 27
pub const DW_OP_LIT28: u8 = 0x4C; // Literal 28
pub const DW_OP_LIT29: u8 = 0x4D; // Literal 29
pub const DW_OP_LIT30: u8 = 0x4E; // Literal 30
pub const DW_OP_LIT31: u8 = 0x4F; // Literal 31
pub const DW_OP_REG0: u8 = 0x50; // Contents of reg0
pub const DW_OP_REG1: u8 = 0x51; // Contents of reg1
pub const DW_OP_REG2: u8 = 0x52; // Contents of reg2
pub const DW_OP_REG3: u8 = 0x53; // Contents of reg3
pub const DW_OP_REG4: u8 = 0x54; // Contents of reg4
pub const DW_OP_REG5: u8 = 0x55; // Contents of reg5
pub const DW_OP_REG6: u8 = 0x56; // Contents of reg6
pub const DW_OP_REG7: u8 = 0x57; // Contents of reg7
pub const DW_OP_REG8: u8 = 0x58; // Contents of reg8
pub const DW_OP_REG9: u8 = 0x59; // Contents of reg9
pub const DW_OP_REG10: u8 = 0x5A; // Contents of reg10
pub const DW_OP_REG11: u8 = 0x5B; // Contents of reg11
pub const DW_OP_REG12: u8 = 0x5C; // Contents of reg12
pub const DW_OP_REG13: u8 = 0x5D; // Contents of reg13
pub const DW_OP_REG14: u8 = 0x5E; // Contents of reg14
pub const DW_OP_REG15: u8 = 0x5F; // Contents of reg15
pub const DW_OP_REG16: u8 = 0x60; // Contents of reg16
pub const DW_OP_REG17: u8 = 0x61; // Contents of reg17
pub const DW_OP_REG18: u8 = 0x62; // Contents of reg18
pub const DW_OP_REG19: u8 = 0x63; // Contents of reg19
pub const DW_OP_REG20: u8 = 0x64; // Contents of reg20
pub const DW_OP_REG21: u8 = 0x65; // Contents of reg21
pub const DW_OP_REG22: u8 = 0x66; // Contents of reg22
pub const DW_OP_REG23: u8 = 0x67; // Contents of reg23
pub const DW_OP_REG24: u8 = 0x68; // Contents of reg24
pub const DW_OP_REG25: u8 = 0x69; // Contents of reg25
pub const DW_OP_REG26: u8 = 0x6A; // Contents of reg26
pub const DW_OP_REG27: u8 = 0x6B; // Contents of reg27
pub const DW_OP_REG28: u8 = 0x6C; // Contents of reg28
pub const DW_OP_REG29: u8 = 0x6D; // Contents of reg29
pub const DW_OP_REG30: u8 = 0x6E; // Contents of reg30
pub const DW_OP_REG31: u8 = 0x6F; // Contents of reg31
pub const DW_OP_BREG0: u8 = 0x70; // base register 0 + SLEB128 offset
pub const DW_OP_BREG1: u8 = 0x71; // base register 1 + SLEB128 offset
pub const DW_OP_BREG2: u8 = 0x72; // base register 2 + SLEB128 offset
pub const DW_OP_BREG3: u8 = 0x73; // base register 3 + SLEB128 offset
pub const DW_OP_BREG4: u8 = 0x74; // base register 4 + SLEB128 offset
pub const DW_OP_BREG5: u8 = 0x75; // base register 5 + SLEB128 offset
pub const DW_OP_BREG6: u8 = 0x76; // base register 6 + SLEB128 offset
pub const DW_OP_BREG7: u8 = 0x77; // base register 7 + SLEB128 offset
pub const DW_OP_BREG8: u8 = 0x78; // base register 8 + SLEB128 offset
pub const DW_OP_BREG9: u8 = 0x79; // base register 9 + SLEB128 offset
pub const DW_OP_BREG10: u8 = 0x7A; // base register 10 + SLEB128 offset
pub const DW_OP_BREG11: u8 = 0x7B; // base register 11 + SLEB128 offset
pub const DW_OP_BREG12: u8 = 0x7C; // base register 12 + SLEB128 offset
pub const DW_OP_BREG13: u8 = 0x7D; // base register 13 + SLEB128 offset
pub const DW_OP_BREG14: u8 = 0x7E; // base register 14 + SLEB128 offset
pub const DW_OP_BREG15: u8 = 0x7F; // base register 15 + SLEB128 offset
pub const DW_OP_BREG16: u8 = 0x80; // base register 16 + SLEB128 offset
pub const DW_OP_BREG17: u8 = 0x81; // base register 17 + SLEB128 offset
pub const DW_OP_BREG18: u8 = 0x82; // base register 18 + SLEB128 offset
pub const DW_OP_BREG19: u8 = 0x83; // base register 19 + SLEB128 offset
pub const DW_OP_BREG20: u8 = 0x84; // base register 20 + SLEB128 offset
pub const DW_OP_BREG21: u8 = 0x85; // base register 21 + SLEB128 offset
pub const DW_OP_BREG22: u8 = 0x86; // base register 22 + SLEB128 offset
pub const DW_OP_BREG23: u8 = 0x87; // base register 23 + SLEB128 offset
pub const DW_OP_BREG24: u8 = 0x88; // base register 24 + SLEB128 offset
pub const DW_OP_BREG25: u8 = 0x89; // base register 25 + SLEB128 offset
pub const DW_OP_BREG26: u8 = 0x8A; // base register 26 + SLEB128 offset
pub const DW_OP_BREG27: u8 = 0x8B; // base register 27 + SLEB128 offset
pub const DW_OP_BREG28: u8 = 0x8C; // base register 28 + SLEB128 offset
pub const DW_OP_BREG29: u8 = 0x8D; // base register 29 + SLEB128 offset
pub const DW_OP_BREG30: u8 = 0x8E; // base register 30 + SLEB128 offset
pub const DW_OP_BREG31: u8 = 0x8F; // base register 31 + SLEB128 offset
pub const DW_OP_REGX: u8 = 0x90; // ULEB128 register
pub const DW_OP_FBREG: u8 = 0x91; // SLEB128 offset
pub const DW_OP_BREGX: u8 = 0x92; // ULEB128 register followed by SLEB128 offset
pub const DW_OP_PIECE: u8 = 0x93; // ULEB128 size of piece addressed
pub const DW_OP_DEREF_SIZE: u8 = 0x94; // 1-byte size of data retrieved
pub const DW_OP_XDEREF_SIZE: u8 = 0x95; // 1-byte size of data retrieved
pub const DW_OP_NOP: u8 = 0x96;
pub const DW_OP_PUSH_OBJECT_ADDRESS: u8 = 0x97;
pub const DW_OP_CALL2: u8 = 0x98; // 2-byte offset of DIE
pub const DW_OP_CALL4: u8 = 0x99; // 4-byte offset of DIE
pub const DW_OP_CALL_REF: u8 = 0x9A; // 4- or 8-byte offset of DIE
pub const DW_OP_LO_USER: u8 = 0xE0;
pub const DW_OP_APPLE_UNINIT: u8 = 0xF0;
pub const DW_OP_HI_USER: u8 = 0xFF;

// DWARF unwind instructions.
pub const DW_CFA_NOP: u8 = 0x0;
pub const DW_CFA_SET_LOC: u8 = 0x1;
pub const DW_CFA_ADVANCE_LOC1: u8 = 0x2;
pub const DW_CFA_ADVANCE_LOC2: u8 = 0x3;
pub const DW_CFA_ADVANCE_LOC4: u8 = 0x4;
pub const DW_CFA_OFFSET_EXTENDED: u8 = 0x5;
pub const DW_CFA_RESTORE_EXTENDED: u8 = 0x6;
pub const DW_CFA_UNDEFINED: u8 = 0x7;
pub const DW_CFA_SAME_VALUE: u8 = 0x8;
pub const DW_CFA_REGISTER: u8 = 0x9;
pub const DW_CFA_REMEMBER_STATE: u8 = 0xA;
pub const DW_CFA_RESTORE_STATE: u8 = 0xB;
pub const DW_CFA_DEF_CFA: u8 = 0xC;
pub const DW_CFA_DEF_CFA_REGISTER: u8 = 0xD;
pub const DW_CFA_DEF_CFA_OFFSET: u8 = 0xE;
pub const DW_CFA_DEF_CFA_EXPRESSION: u8 = 0xF;
pub const DW_CFA_EXPRESSION: u8 = 0x10;
pub const DW_CFA_OFFSET_EXTENDED_SF: u8 = 0x11;
pub const DW_CFA_DEF_CFA_SF: u8 = 0x12;
pub const DW_CFA_DEF_CFA_OFFSET_SF: u8 = 0x13;
pub const DW_CFA_VAL_OFFSET: u8 = 0x14;
pub const DW_CFA_VAL_OFFSET_SF: u8 = 0x15;
pub const DW_CFA_VAL_EXPRESSION: u8 = 0x16;
pub const DW_CFA_ADVANCE_LOC: u8 = 0x40; // high 2 bits are 0x1, lower 6 bits are delta
pub const DW_CFA_OFFSET: u8 = 0x80; // high 2 bits are 0x2, lower 6 bits are register
pub const DW_CFA_RESTORE: u8 = 0xC0; // high 2 bits are 0x3, lower 6 bits are register
pub const DW_CFA_GNU_WINDOW_SAVE: u8 = 0x2D; // GNU extensions
pub const DW_CFA_GNU_ARGS_SIZE: u8 = 0x2E;
pub const DW_CFA_GNU_NEGATIVE_OFFSET_EXTENDED: u8 = 0x2F;
pub const DW_CFA_AARCH64_NEGATE_RA_STATE: u8 = 0x2D; // AARCH64 extensions
